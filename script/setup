#!/bin/sh
# Install all dotfiles into the home directory
# Adapted from https://github.com/MikeMcQuaid/dotfiles/blob/master/script/setup

DOTFILESDIRREL=$(dirname $0)
cd $DOTFILESDIRREL/..
DOTFILESDIR=$(pwd -P)

[ $(uname -s) = "Darwin" ] && export OSX=1 && export UNIX=1
[ $(uname -s) = "Linux" ] && export LINUX=1 && export UNIX=1
uname -s | grep -q "_NT-" && export WINDOWS=1

for DOTFILE in *; do
  HOMEFILE="$HOME/.$DOTFILE"
  [ -d $DOTFILE ] && DOTFILE="$DOTFILE/"
  DIRFILE="$DOTFILESDIR/$DOTFILE"

  echo $DOTFILE | egrep -q '(^script/$|\.txt$|\.md$)' && continue
  echo $DOTFILE | egrep -q '(^rbenv/$|pyenv/$|nodenv/$)' && continue

  # Don't install some files unless you're also called Mike.
  if echo $USER | grep -vq 'mike'
  then
    echo $DOTFILE | grep -q 'gitconfig-user' && continue
    echo $DOTFILE | grep -q 'ssh' && continue
  fi

  echo $DOTFILE | grep -q '\.sh' \
    && HOMEFILE="$HOME/.$(echo $DOTFILE | sed -e 's/\.sh//')"

  if [ $UNIX ]
  then
    if [ -L "$HOMEFILE" ] && ! [ -d $DOTFILE ]
    then
      ln -sfv "$DIRFILE" "$HOMEFILE"
    else
      rm -rv "$HOMEFILE"
      ln -sv "$DIRFILE" "$HOMEFILE"
    fi
  else
    cp -rv "$DIRFILE" "$HOMEFILE"
  fi
done

mkdir -p $(pyenv root)
mkdir -p $(rbenv root)
mkdir -p $(nodenv root)

for FOLDER in rbenv pyenv nodenv; do
  if [ -d "$FOLDER" ]; then
    for DOTFILE in $FOLDER/*; do
      DIRFILE="$DOTFILESDIR/$DOTFILE"
      HOMEFILE="$HOME/.$DOTFILE"
      if [ -L "$HOMEFILE" ] && ! [ -d $DOTFILE ]
      then
        ln -sfv "$DIRFILE" "$HOMEFILE"
      elif ! [ -d $DOTFILE ]
      then
        rm -v "$HOMEFILE"
        ln -sv "$DIRFILE" "$HOMEFILE"
      else
        echo "ignoring $DOTFILE because it is a directory"
      fi
    done
  fi
done

append_to_file() {
  local file="$1"
  local text="$2"

  if [ -e "$file" ];
  then
    if ! grep -qs "^$text$" "$file"; then
      printf "\n%s\n" "$text" >> "$file"
    fi
  else
    touch "$file"
    printf "%s\n" "$text" >> "$file"
  fi
}

if [ $OSX ]
then
  mkdir -p "$HOME/Library/Application Support/Sublime Text 3/Installed Packages/"
  if [ ! -f "$HOME/Library/Application Support/Sublime Text 3/Installed Packages/Package Control.sublime-package" ]; then
    # http://stackoverflow.com/questions/19529999/add-package-control-in-sublime-text-3-through-the-command-line
    echo "Installing Sublime Text 3 Package Manager"
    wget http://sublime.wbond.net/Package%20Control.sublime-package -P "$HOME/Library/Application Support/Sublime Text 3/Installed Packages/"
  fi

  duti -s com.sublimetext.3 java all
  duti -s com.sublimetext.3 js all
  duti -s com.sublimetext.3 py all
  duti -s com.sublimetext.3 rb all
  duti -s com.sublimetext.3 sh all
  duti -s com.sublimetext.3 json all
  duti -s com.sublimetext.3 xml all
  duti -s com.sublimetext.3 public.unix-executable all
  duti -s com.sublimetext.3 public.plain-text all
  duti -s com.sublimetext.3 public.source-code all
fi

brew bundle --global

eval "$(pyenv init -)"
pyenv install --skip-existing 2.7.13
pyenv install --skip-existing 3.6.0
pyenv global 3.6.0 2.7.13
pyenv rehash
pip3 install -r "$(pyenv root)/default-packages"
pip2 install virtualenvwrapper

# use homebrew python 2 packages in system python and pyenv python
# mkdir -p "$HOME/Library/Python/2.7/lib/python/site-packages"
# append_to_file "$HOME/Library/Python/2.7/lib/python/site-packages/homebrew.pth" "import sys; sys.path.insert(1, '$(brew --prefix)/lib/python2.7/site-packages')"
# append_to_file "$(dirname $(pyenv which python2))/../lib/python2.7/site-packages/homebrew.pth" "import sys; sys.path.insert(1, '$(brew --prefix)/lib/python2.7/site-packages')"

# use homebrew python 3 packages in system python and pyenv python
# mkdir -p "$HOME/Library/Python/3.6/lib/python/site-packages"
# append_to_file "$HOME/Library/Python/3.6/lib/python/site-packages/homebrew.pth" "import sys; sys.path.insert(1, '$(brew --prefix)/lib/python3.6/site-packages')"
# append_to_file "$(dirname $(pyenv which python3))/../lib/python3.6/site-packages/homebrew.pth" "import sys; sys.path.insert(1, '$(brew --prefix)/lib/python3.6/site-packages')"

eval "$(rbenv init -)"
rbenv install --skip-existing 2.2.2
rbenv install --skip-existing 2.4.1
rbenv global 2.2.2
rbenv rehash
gem update --system
gem install bundler --conservative
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))
rbenv rehash

eval "$(nodenv init -)"
nodenv install --skip-existing 7.8.0
nodenv global 7.8.0

createuser --superuser --createdb --createrole --replication postgres || "postgres superuser, 'postgres', already exists"
createuser --superuser --createdb --createrole --replication root || "postgres superuser, 'root', already exists"

GITHUB_USER="$(git config --get github.user)"

if [ -n "$GITHUB_USER" ]; then

  LICENSES_URL="https://github.com/$GITHUB_USER/licenses"
  if git ls-remote "$LICENSES_URL" &>/dev/null; then
    echo "Fetching $GITHUB_USER/licenses from GitHub:"
    if [ ! -d "$HOME/.licenses" ]; then
      echo "Cloning to ~/.licenses:"
      git clone $Q "$LICENSES_URL" ~/.licenses
    else
      (
        cd ~/.licenses
        git pull $Q --rebase --autostash
      )
    fi
    (
      cd ~/.licenses
      for i in script/setup script/bootstrap; do
        if [ -f "$i" ] && [ -x "$i" ]; then
          echo "Running licenses $i:"
          "$i" 2>/dev/null
          break
        fi
      done
    )
    echo ""
  fi

  SECRETS_URL="https://github.com/$GITHUB_USER/secrets"
  if git ls-remote "$SECRETS_URL" &>/dev/null; then
    echo "Fetching $GITHUB_USER/secrets from GitHub:"
    if [ ! -d "$HOME/.secrets" ]; then
      echo "Cloning to ~/.secrets:"
      git clone $Q "$SECRETS_URL" ~/.secrets
    else
      (
        cd ~/.secrets
        git pull $Q --rebase --autostash
      )
    fi
    (
      cd ~/.secrets
      for i in script/setup script/bootstrap; do
        if [ -f "$i" ] && [ -x "$i" ]; then
          echo "Running secrets $i:"
          "$i" 2>/dev/null
          break
        fi
      done
    )
    echo ""
  fi

fi

# macOS defaults

# Close any open System Preferences panes, to prevent them from overriding
# settings weâ€™re about to change
osascript -e 'tell application "System Preferences" to quit'

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Save to disk (not to iCloud) by default
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# Reveal IP address, hostname, OS version, etc. when clicking the clock
# in the login window
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Trackpad: map bottom right corner to right-click
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

# Enable full keyboard access for all controls
# (e.g. enable Tab in modal dialogs)
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

# Use scroll gesture with the Ctrl (^) modifier key to zoom
defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
# Follow the keyboard focus while zoomed in
defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

# Disable press-and-hold for keys in favor of key repeat
defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

# Set a blazingly fast keyboard repeat rate
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 10

# Save screenshots to the desktop
defaults write com.apple.screencapture location -string "${HOME}/Pictures/Screenshots"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "png"

# Set Desktop as the default location for new Finder windows
# For other paths, use `PfLo` and `file:///full/path/here/`
defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

# Show icons for hard drives, servers, and removable media on the desktop
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

# Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true

# Finder: show path bar
defaults write com.apple.finder ShowPathbar -bool true

# Keep folders on top when sorting by name
defaults write com.apple.finder _FXSortFoldersFirst -bool true

# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Use list view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

# Donâ€™t automatically rearrange Spaces based on most recent use
defaults write com.apple.dock mru-spaces -bool false

# Minimize windows into their applicationâ€™s icon
defaults write com.apple.dock minimize-to-application -bool true

# Enable highlight hover effect for the grid view of a stack (Dock)
defaults write com.apple.dock mouse-over-hilite-stack -bool true

echo "Done. Note that some of these changes require a logout/restart to take effect."
